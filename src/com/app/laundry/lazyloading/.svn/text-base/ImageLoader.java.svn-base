package com.spiceairtelkenya.player.lazyloading;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.spice.mziiki.R;

import android.os.Build;
import android.os.Handler;
import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.widget.ImageView;

@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class ImageLoader {
    
    MemoryCache memoryCache=new MemoryCache();
    FileCache fileCache;
    private Map<ImageView, String> imageViews=Collections.synchronizedMap(new WeakHashMap<ImageView, String>());
    ExecutorService executorService;
    Handler handler=new Handler();//handler to display images in UI thread
    
    public ImageLoader(Context context){
        fileCache=new FileCache(context);
        executorService=Executors.newFixedThreadPool(5);
    }
    
    final int stub_id=R.drawable.no_album; 
    public void DisplayImage(String url, final ImageView imageView,final ImageView blurImageView)
    {
        imageViews.put(imageView, url);
        Bitmap bitmap=memoryCache.get(url);
        if(bitmap!=null)
            imageView.setImageBitmap(bitmap);
        else
        {
            queuePhoto(url, imageView,blurImageView);
            imageView.setImageResource(stub_id);
        }
        
        Runnable imageRun = new Runnable() {
     		@Override
     		public void run() {
     			
     	        	blurImage(imageView,blurImageView);
     		}
     	};
     	if(blurImageView!=null){
        Handler handler = new Handler();
		handler.postDelayed(imageRun, 200);
    }
        
        
    }
        
    private void queuePhoto(String url, ImageView imageView,ImageView blurImageView)
    {
        PhotoToLoad p=new PhotoToLoad(url, imageView,blurImageView);
        executorService.submit(new PhotosLoader(p));
    }
    
    private Bitmap getBitmap(String url) 
    {
        File f=fileCache.getFile(url);
        
        //from SD cache
        Bitmap b = decodeFile(f);
        if(b!=null)
            return b;
        
        //from web
        try {
            Bitmap bitmap=null;
            URL imageUrl = new URL(url);
            HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            conn.setInstanceFollowRedirects(true);
            InputStream is=conn.getInputStream();
            OutputStream os = new FileOutputStream(f);
            Utils.CopyStream(is, os);
            os.close();
            conn.disconnect();
            bitmap = decodeFile(f);
            return bitmap;
        } catch (Throwable ex){
           ex.printStackTrace();
           if(ex instanceof OutOfMemoryError)
               memoryCache.clear();
           return null;
        }
    }

    //decodes image and scales it to reduce memory consumption
    private Bitmap decodeFile(File f){
        try {
            //decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            FileInputStream stream1=new FileInputStream(f);
            BitmapFactory.decodeStream(stream1,null,o);
            stream1.close();
            
            //Find the correct scale value. It should be the power of 2.
           /* final int REQUIRED_SIZE=210;
            int width_tmp=o.outWidth, height_tmp=o.outHeight;
            int scale=1;
            while(true){
                if(width_tmp/2<REQUIRED_SIZE || height_tmp/2<REQUIRED_SIZE)
                    break;
                width_tmp/=2;
                height_tmp/=2;
                scale*=2;
            }
            
            //decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize=scale;*/
            FileInputStream stream2=new FileInputStream(f);
            Bitmap bitmap=BitmapFactory.decodeStream(stream2, null, null);
            stream2.close();
            return bitmap;
        } catch (FileNotFoundException e) {
        } 
        catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    //Task for the queue
    private class PhotoToLoad
    {
        public String url;
        public ImageView imageView;
        public ImageView blurImageView;
        
        public PhotoToLoad(String u, ImageView i, ImageView i1){
            url=u; 
            imageView=i;
            blurImageView=i1;
        }
    }
    
    class PhotosLoader implements Runnable {
        PhotoToLoad photoToLoad;
        PhotosLoader(PhotoToLoad photoToLoad){
            this.photoToLoad=photoToLoad;
        }
        
        @Override
        public void run() {
            try{
                if(imageViewReused(photoToLoad))
                    return;
                Bitmap bmp=getBitmap(photoToLoad.url);
                memoryCache.put(photoToLoad.url, bmp);
                if(imageViewReused(photoToLoad))
                    return;
                BitmapDisplayer bd=new BitmapDisplayer(bmp, photoToLoad);
                handler.post(bd);
            }catch(Throwable th){
                th.printStackTrace();
            }
        }
    }
    
    boolean imageViewReused(PhotoToLoad photoToLoad){
        String tag=imageViews.get(photoToLoad.imageView);
        if(tag==null || !tag.equals(photoToLoad.url))
            return true;
        return false;
    }
    
    //Used to display bitmap in the UI thread
    class BitmapDisplayer implements Runnable
    {
        Bitmap bitmap;
        PhotoToLoad photoToLoad;
        public BitmapDisplayer(Bitmap b, PhotoToLoad p){bitmap=b;photoToLoad=p;}
        public void run()
        {
            if(imageViewReused(photoToLoad))
                return;
            if(bitmap!=null)
                photoToLoad.imageView.setImageBitmap(bitmap);
           
            else
                photoToLoad.imageView.setImageResource(stub_id);
            
            Runnable imageRun = new Runnable() {
         		@Override
         		public void run() {
         			
         	        	blurImage(photoToLoad.imageView,photoToLoad.blurImageView);
         		}
         	};
         	if(photoToLoad.blurImageView!=null){
            Handler handler = new Handler();
    		handler.postDelayed(imageRun, 200);
            
         	}
        }
    }

    public void clearCache() {
        memoryCache.clear();
        fileCache.clear();
    }
     private void blurImage(ImageView smallImage,ImageView full_blurImage){
    	 Bitmap bm = ((BitmapDrawable) smallImage.getDrawable()).getBitmap();
			Bitmap result = Bitmap.createScaledBitmap(bm, 10, 10, false);
			//Bitmap afterBlur = processingBitmap(result);
			//;afterBlur = processingBitmap(afterBlur);
			
			full_blurImage.setImageBitmap(result);
			full_blurImage.setAlpha(.7f);
			
     }
     
     
     
    
    private Bitmap processingBitmap(Bitmap src) {
		Bitmap dest = Bitmap.createBitmap(src.getWidth(), src.getHeight(),
				src.getConfig());

		int bmWidth = src.getWidth();
		int bmHeight = src.getHeight();
		int bmWidth_MINUS_2 = bmWidth - 2;
		int bmHeight_MINUS_2 = bmHeight - 2;

		for (int i = 1; i <= bmWidth_MINUS_2; i++) {
			for (int j = 1; j <= bmHeight_MINUS_2; j++) {

				// get the surround 3*3 pixel of current src[i][j] into a matrix
				// subSrc[][]
				int[][] subSrc = new int[3][3];
				for (int k = 0; k < 3; k++) {
					for (int l = 0; l < 3; l++) {
						subSrc[k][l] = src.getPixel(i - 1 + k, j - 1 + l);
					}
				}

				// subSum = subSrc[][] * knl[][]
				int subSumA = 0;
				int subSumR = 0;
				int subSumG = 0;
				int subSumB = 0;

				int[][] knl = { { 1, 1, 1 }, { 1, 1, 1 }, { 1, 1, 1 } };
				for (int k = 0; k < 3; k++) {
					for (int l = 0; l < 3; l++) {
						subSumA += Color.alpha(subSrc[k][l]) * knl[k][l];
						subSumR += Color.red(subSrc[k][l]) * knl[k][l];
						subSumG += Color.green(subSrc[k][l]) * knl[k][l];
						subSumB += Color.blue(subSrc[k][l]) * knl[k][l];
					}
				}

				subSumA = subSumA / 9;
				subSumR = subSumR / 9;
				subSumG = subSumG / 9;
				subSumB = subSumB / 9;

				if (subSumA < 0) {
					subSumA = 0;
				} else if (subSumA > 255) {
					subSumA = 255;
				}

				if (subSumR < 0) {
					subSumR = 0;
				} else if (subSumR > 255) {
					subSumR = 255;
				}

				if (subSumG < 0) {
					subSumG = 0;
				} else if (subSumG > 255) {
					subSumG = 255;
				}

				if (subSumB < 0) {
					subSumB = 0;
				} else if (subSumB > 255) {
					subSumB = 255;
				}

				dest.setPixel(i, j,
						Color.argb(subSumA, subSumR, subSumG, subSumB));
			}
		}

		return dest;
	}

}
